<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Strobe protocol framework分析 - Sponge Construction]]></title>
    <url>%2F2018%2F12%2F28%2FStrobe-Sponge%2F</url>
    <content type="text"><![CDATA[Strobe是一个面向物联网设计的密码学协议框架，目标是为了使加密协议更容易开发，部署，分析，并适用于微型物联网设备。在Strobe的设计中，仅使用了一个块函数Keccak-f来对消息进行加密和验证。 Strobe利用了Keccak的海绵结构（Sponge Construction）来设计。这使得在Strobe的基础上，可以实现包括密码学哈希函数（Cryptographic hash function），消息认证码（Message authentication code）等机制；可以构建对称加密机制，数字签名机制（通过Schnorr Scheme），密钥交换机制（通过DH算法），以及TLS等类似的密码协议。 在这里将会分析Strobe协议的组成以及其原理，以及如何在Strobe上构建密码协议。 在分析Strobe协议之前，首先需要明确什么是海绵结构。 Strobe protocol framework - Sponge Construction 海绵结构（Sponge Construction）是Keccak提出的一种密码学函数。最开始的海绵结构是为构造密码学哈希函数所设计。后来发现通过海绵结构不仅仅适用于具有固定输出长度的密码学哈希函数，同样也适用于具有固定输入长度的流密码机制。 现有的的哈希函数可以将任意长度的输入映射为固定长度输出（实际上包括SHA2在内的密码学哈希函数也都做不到任意长度的输入，只不过是因为现有的密码学哈希函数可容纳的输入长度上限太大，近似的看作输入长度无限），而海绵结构则是可以将任意长度的输入映射为任意长度的输出。同时它的输出就像是一个随机数预言机（Random Oracle），能够保证输出的随机性。 Cryptographic Sponge Functions 说了这么多，到底什么是海绵结构呢？ 在密码学中的“海绵”，比较正式的说法应该是密码学海绵函数（Cryptographic Sponge Functions）。这个函数就像是一个海绵一样，能够不断，多次的输入来自外部的数据；同时也能够像挤海绵里的水一样，多次向外输出数据。不同于现实中的海绵，这里的海绵是可以无限的输入数据，也可以无限的输出数据。 海绵结构是一个简单的迭代的结构。构造一个海绵结构需要两个元素：一个长度为\(b\)的状态\(S\)（state），在状态上展开迭代过程；以及一个用于操作状态，输入和输入长度都为\(b\)的排列函数\(f\)。 实际上这里的函数\(f\)是一个纯函数，它接收状态作为传入，返回的是经过它处理后的状态。 而被传入函数\(f\)的状态\(S\)被分为两部分，分别是长度为\(r\)的公共部分\(R\)（rate），和长度为\(c\)的私有部分\(C\)（capacity）。 函数\(f\)的作用是根据现有的排列（permutation）来迭代产生新的排列。最新的SHA-3算法采用的同样是海绵结构，它采用的排列函数\(f\)是keccak-f[1600]。其中的1600代表这个函数的输入是1600位，输出同样是1600位。在Strobe中采用的排列函数\(f\)是keccak-f[b]，其中\(b\)是状态\(S\)的长度，根据keccak-f[b]的设计，\(b\)的取值只能是{200,400,800,1600}，长度单位是bit。 keccak算法 在keccak的处理过程中被分为两个过程，第一个部分是吸收过程，第二个部分是挤压过程。 吸收过程就是将输入的数据输入到海绵结构中。输入数据被填充后分割为多个块，每个块的长度与公共部分\(R\)的长度相同，之后不断的将这些块与状态\(S\)的公共部分\(R\)异或，每次异或后都调用排列函数\(f\)。 整个吸收过程是针对每一个输入数据块\(m_i\)执行如下算法： \[ (r,c) = f(r \oplus m_i,c) \] 吸收过程可以无限制的迭代下去，从这个角度来说，keccak可以吸收无限多的数据到状态中。 挤压过程就是从海绵结构中获得输出。当我们需要从海绵结构中获得输出时，我们从状态的公共部分读取输出，如果长度不够，那么可以利用\(f\)去修改状态，继续读取新的公共部分。这个过程可以不断的继续重复下去，直到读取到足够的输出为止。 这个过程就是现在SHA-3的算法的执行流程。得到的输出就是哈希值。 实际上这样的海绵结构不仅仅可以用于哈希函数中。由于输入输出长度可变的特性，当输入较长而输出较短的情况适用于HASH，MAC等场景；而当输入较短，输出较长的情况下适用于对称加密流密码的场景。在流密码的场景中，输入的时密钥与nonce值，输出的是密钥流。 Duplex construction 事实上，海绵结构不仅仅可以一次吸收，一次挤出，它可以不断的重复吸收挤压的过程。keccak team提供了一种可以不断交替输入输出数据的结构，被称为双工结构（Duplex construction）。在这种结构允许我们不断的输入，输出，输入，输出数据。这种结构带来了一种好处：每一时刻的输出会受到之前输入与输出的影响。这样的属性可以实现相同操作的副本一致性（transcript consistency）。 Summary 这篇文章简单的介绍了keccak团队设计的海绵结构，以及它的工作方式。虽然keccak成为了最新的SHA-3算法标准，但是并不代表keccak只能当作哈希函数来使用。后续将会继续介绍基于keccak构造的密码学协议框架Strobe。]]></content>
      <tags>
        <tag>cryptography</tag>
        <tag>strobe protocol framework</tag>
        <tag>keccak</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数字签名机制 - ED25519]]></title>
    <url>%2F2018%2F12%2F28%2Fed25519%2F</url>
    <content type="text"><![CDATA[ED25519是一种EdDSA算法，是一种在扭曲爱德华兹曲线（Twisted Edwards curves）上使用Schnorr机制来实现的一种数字签名机制。它具有速度快，密钥较短，安全性高等优点。 数字签名机制 - Schnorr Scheme 数字签名机制- ED25519 本文中所有出现的变量，小写字母表示标量，即一个数字，在这里指整数；大写字母表示离散对数问题中的参数，例如：椭圆曲线中的点。 椭圆曲线密码学（ECC）是基于离散对数问题中的椭圆曲线而设计的。现行的ECC算法多用于替代RSA算法，以提升原始算法的安全性与性能。相比较RSA，ECC的性能较高，密钥长度较短，然而实现难度较大。在ECC算法基础上构建的数字签名算法被称为ECDSA算法，经过NIST批准的曲线有多条，例如secp256r1，secp256k1等。但现有的ECC算法中的曲线被指存在后门。 EdDSA从某种意义上来说也属于椭圆曲线密码学，不同的是它采用扭曲爱德华兹曲线作为椭圆曲线，同时采用的签名机制也不同于ECDSA算法。EdDSA的重要实现ED25519是Daniel J. Bernstein等人设计的EdDSA算法，采用的曲线参数完全公开，并说明了参数选取的意义，保证曲线中并未内置后门。同时ED25519采用Schnorr机制作为签名的构建方式，使得签名与验证的性能得到了巨大的提升。 ED25519算法 在现有的方案ED25519种，采用了将参数\(R\)，公钥 \(Y\)，与消息体 \(M\)进行哈希作为随机数 \(r_2\)。具体的ED25519公私钥生成与签名验证的方式如下： 公私钥生成 当前根据ED25519协议中密钥长度 \(b\)，被选择为\(256\)；生成元为 \(G\) ；哈希函数 \(H()\)为SHA512；\(M\)是被签名的信息；\(l\) 是一个质数，满足\(lG = 0\)。 随机选择一个长度为 \(b\) 为的二进制数作为私钥 \(a\)。 对 \(a\) 的进行哈希，产生一个长度为 \(2b\) 的值为 \(h = H(a)\)，其中 \(h_0 \ldots h_{b-1}\) 为\(x\)，用于产生公钥 ，\(h_b \dots h_{2b-1}\) 为随机数 \(k\) 。 将 \(x_0, x_1, x_2​\)置\(0​\)，\(x_{b-1}​\)置0，\(x_{b-2}​\)置1。 计算公钥 \(Y = xG\)。 其中 \(a\) 为私钥，\(Y\)为公钥。 签名流程 进行签名时，需要私钥 \(a\)，执行公私钥生成算法，得到公钥 \(Y\)，随机数 \(k\)。 计算随机数 \(r = H(k, M)\)。 计算随机点\(R = rG\)。 计算签名\(s = (r + H(R,Y,M)x ) \bmod l\)。 其中得到的\((R,s)\)便是得到的数字签名。 其中 \(s\) 相当于前文所述Schnorr签名方案中的 \(s\) ，\(r\) 相当于 \(r_1\) ，\(H(R,Y,M)\)相当于\(r_2\)。这里的哈希函数\(H()\)便充当了随机数预言机。 验证流程 进行验证时，验证者只需要知道公钥 \(Y\)，签名\((R,s)\)， 消息 \(M\) 即可验证签名过程是否正确。 验证\(sG = R + H(R,Y,M)Y\)是否成立，即可验证签名是否正确。 其中 \(s\) 相当于前文所述Schnorr签名方案中验证公式中的 \(s\) ，\(G\) 为生成元，\(H(R,Y,M)\)为 \(r_2\) ，其余部分一一对应。 安全考量 在ED25519的算法设计中，通过使用密码学哈希函数来代替伪随机数发生器，避免了签名算法的使用者因为采用的随机数生成器不够随机化而产生的安全问题。ED25519的实现除去私钥的生成之外，签名过程已经完全脱离对随机数发生器的依赖，避免了因为随机化问题而导致密钥的泄露与安全性问题。]]></content>
      <tags>
        <tag>cryptography</tag>
        <tag>schnorr scheme</tag>
        <tag>digital signature</tag>
        <tag>ED25519</tag>
        <tag>EdDSA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数字签名机制 - Schnorr Scheme]]></title>
    <url>%2F2018%2F12%2F27%2FSchnorr-Scheme%2F</url>
    <content type="text"><![CDATA[Schnorr机制是一种基于离散对数难题的知识证明机制，由德国数学家和密码学家Claus-Peter Schnorr在1990年提出。这种知识证明机制具有实现简单，验证速度较快等优点。最开始是为Smart Card这样的资源受限设备而设计。 经过这些年的发展，在原始的Schnorr机制上实现了多种多样的改进与功能，实现了高性能的数字签名，以及包括环签名，门限签名等复杂签名机制。 在这里参考Schnorr的论文与其他的参考资料，分析Schnorr机制的原始机制与实现。并分析现在主流的EdDSA的实现ED25519，以及如何在Schnorr机制上建立的复杂签名机制。 数字签名机制 - Schnorr Scheme 数字签名机制- ED25519 本文中所有出现的变量，小写字母表示标量，即一个数字，在这里指整数；大写字母表示离散对数问题中的参数，例如：椭圆曲线中的点。 Original Schnorr Scheme 原始的Schnorr机制是一个交互式的机制。允许在任何拥有相同生成元（指在离散对数问题中）的协议参与者双方，证明某一方拥有私钥 \(x\) 而不需要直接交换它。其中双方都拥有的生成元设为 \(G\) ，证明者拥有私钥 \(x\) 。验证者从证明者处取得 \(Y\) ，其中 \(Y = xG\)，\(Y\) 即公钥。 Original Schnorr Signature的协议流程如下： 证明者随机选择一个标量 \(r_1\)，然后计算出 \(R = r_1G\)。并将 \(R\) 发送至验证者。 验证者回应一个随机的标量 \(r_2\)。 证明者回应一个标量\(s\)，通过公式 \(s = r_1 + r_2x\) 计算。 因为离散对数问题是困难的，因此验证者不会知道 \(x, r_1\)的值，验证者仅知道由 \(x, r_1\)计算得到的 \(Y, R\)。但是验证者可以通过以下计算来验证\(s\)是正确的： 由于\(s = r_1 + r_2x\)，等式两边同时添加相同的生成元可得 \(sG = r_1G + r_2xG\)。 由于\(R = r_1G\)，\(Y = xG\)，可以化简得到 \(sG = R + r_2Y\)。 其中 \(G\) 是生成元，双方都可知，\(R, Y, s, r_2\) 验证者都知道，所以验证者可以轻松验证化简过的公式。 这个过程是零知识的，因为验证者并不能得到私钥 \(x\) 的值，却可以通过计算与通讯的方式验证证明者确实拥有私钥 \(x\)。 Problem of Original Schnorr Scheme 然而这样交互式的过程，会导致验证者通过"fork"的方式获得私钥 \(x\)。验证者只需要简单的提供两个不同的随机值 \(r_2^1, r_2^2\)，并要求证明者计算 \(s_1 = r_1 + r_2^1x, s_2 = r_1 + r_2^2x\)，即可计算出\(x = (s_1 - s_2)/(r_2^1 - r_2^2)\)。这样一来，这个过程便无法公开的验证，因为一旦两个验证者相互串通，交换自己得到的值，便可以推出私钥\(x\)。 为了解决这个问题，后续将会通过对现有的协议进行Fiat–Shamir变换，使用Random oracles改造这个算法来使Schnorr原始的Schnorr Scheme变成可公开验证的非交互式算法。 Fiat–Shamir and Random oracles 上述原始Schnorr Scheme中存在的私钥泄露问题使得算法无法在公开的环境下使用。通过将原始的交互式协议转变为非交互式协议可以解决这个问题。 Fiat–Shamir变换是一种利用交互式零知识证明方案创建数字签名的方式。根据Fiat–Shamir变换，我们可以将原始方案中的证明者采用随机数预言机（Random oracle）来代替，利用这样的方式构造数字签名。 随机数预言机，即随机数函数，是一种针对任意输入得到的输出之间是项目独立切均匀分布的函数。理想的随机数预言机并不存在，在实现中，经常采用密码学哈希函数作为随机数预言机。 原本的设计中，Schnorr签名是一种交互式协议，需要一个实际存在的验证者与参与者，而根据Fiat-Shamir转换，可以将具体的验证者采用随机数预言机来代替。将验证者替换为随机数预言机后，外部的验证者便无法通过交换 \(r_2\)来推出私钥 \(x\) ，原本的 \(r_2\) 采用随机数预言机产生的随机数来表示。]]></content>
      <tags>
        <tag>cryptography</tag>
        <tag>schnorr scheme</tag>
        <tag>digital signature</tag>
        <tag>ED25519</tag>
        <tag>EdDSA</tag>
      </tags>
  </entry>
</search>
